<?php

namespace BradFeehan\Rainmaker;

/**
 * All exceptions generated by Rainmaker will implement this interface
 *
 * This makes it easy to catch all Rainmaker exceptions in an
 * application that consumes this library by using a pattern like this:
 *
 *     try {
 *         // Do something with Rainmaker
 *     } catch (\BradFeehan\Rainmaker\Exception $e) {
 *         // An exception was raised by Rainmaker
 *     }
 *
 * The reason it's an interface is so that the actual concrete
 * exception classes can now still extend from all the different core
 * PHP exceptions, like InvalidArgumentException, RangeException, etc.
 *
 * If this were a class instead, the concrete classes would all have to
 * inherit from the same core PHP exception class (probably Exception),
 * so applications that catch core PHP's \InvalidArgumentException
 * wouldn't catch any exceptions thrown by Rainmaker (which would be
 * bad).
 */
interface Exception
{
}
